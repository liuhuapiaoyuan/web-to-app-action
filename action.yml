name: "Website to APK Action"
description: "Build folder path of html and creates an APK for it."
branding:
  color: 'blue'
  icon: 'smartphone'
inputs:
  build-folder-path: 
    description: "Path to build folder"
    required: false
    default: "build"

  app-name: 
    description: "Name of App"
    required: false
    default: "MyApp"

  app-package: 
    description: "package name of App"
    required: false
    default: "com.ggss.demoapp"

  output-folder-path:
    description: "Path to output folder"
    required: false
    default: "apk"
    
  app-keystore:
    description: "Path to keystore file"
    required: false

  app-alias:
    description: "Alias for keystore"
    required: false
    default: 'release'

  store-password:
    description: "Password for keystore"
    required: false
    default: '123456'

  key-password:
    description: "Password for key"
    required: false 
    default: '123456'
    
runs:
  using: "composite"
  steps:
    - name: Setup JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17' 
        distribution: 'oracle'
        
    - uses: actions/setup-node@v2
      with:
        node-version: '18.x'
  
    - run: mkdir -p ionic_build_folder/build/
      shell: bash
    
    - name: Copy build files to ionic build folder
      run: cp -r ${{ inputs.build-folder-path }}/* ionic_build_folder/build
      shell: bash
    - name: Copy keystore to ionic build folder
      shell: bash
      run: |
        if [ -n "${{ inputs.app-keystore }}" ]; then
          cp -r ${{ inputs.app-keystore }} ionic_build_folder/my-release-key.keystore
        fi
    - name: Setup jq command
      shell: bash
      run: sudo apt-get install -y jq

    - name: Install Android SDK
      uses: android-actions/setup-android@v3

    - name: Config buildTools
      shell: bash
      run: |
        latest_version=$(ls $ANDROID_HOME/build-tools | sort -V | tail -n 1)
        echo "Latest build-tools version: $latest_version"
        echo "$ANDROID_HOME/build-tools/$latest_version" >> $GITHUB_PATH"
      

    - name: test apksinger
      shell: bash
      run:  apksigner --version

    - name: Setup ionic and capacitor
      run: |
        npm install -g @ionic/cli
        npm init -y
        npm install @capacitor/core
        npm install  -g -S @capacitor/cli  
        echo '{"appId": "${{ inputs.app-package }}","appName": "${{ inputs.app-name }}","bundledWebRuntime": false,"npmClient": "npm","webDir": "build","android":{},"cordova": {}}' > capacitor.config.json
        echo '{"name": "${{ inputs.app-name }}","integrations": {"capacitor": {}},"type": "react"}' > ionic.config.json
        cat capacitor.config.json 
        # Check if app-keystore is provided
        if [ -n "${{ inputs.app-keystore }}" ]; then
          echo "启动签名配置"
          echo '{
            "appId": "${{ inputs.app-package }}",
            "appName": "${{ inputs.app-name }}",
            "bundledWebRuntime": false,
            "npmClient": "npm",
            "webDir": "build",
            "android":{
              "buildOptions": {
                "keystorePath": "../my-release-key.keystore",
                "keystoreAlias": "${{ inputs.app-alias }}",
                "keystorePassword": "${{ inputs.store-password }}",
                "keystoreAliasPassword": "${{ inputs.key-password }}",
                "signingType": "apksigner",
                "releaseType": "APK"
              }
            },
            "cordova": {}
          }' > capacitor.config.json  
        fi
        cat ionic.config.json
        cat capacitor.config.json
        ionic capacitor add android
        capacitor telemetry off
        capacitor build --androidreleasetype APK android
        # capacitor build --keystorepath ../my-release-key.keystore --keystorepass ${{ inputs.key-password }} --keystorealias ${{ inputs.app-alias }} --keystorealiaspass ${{ inputs.store-password }} --androidreleasetype APK android
 
      shell: bash
      working-directory: ionic_build_folder
     
    - name: Copy APK to output folder
      run: |
        mkdir -p ${{ inputs.output-folder-path }}
        cp -r ionic_build_folder/android/app/build/outputs/apk/ ${{ inputs.output-folder-path }}/
      shell: bash
